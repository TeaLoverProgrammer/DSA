import org.omg.CORBA.SystemException;

import java.nio.BufferOverflowException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

public class MyHashMap {

    private Integer size;
    private List<Bucket> addresses;

    MyHashMap(int size){
        this.size = size;
        addresses = new ArrayList<>();
    }

    public static void main(String[] args) {
        MyHashMap myHashMapCollection = new MyHashMap(5);

        myHashMapCollection.set("Nia",1);
        myHashMapCollection.set("Mia",2);
        myHashMapCollection.set("BO",25);

        System.out.println("key is "+ myHashMapCollection.get("BO").getKey() +" value is: "
                + myHashMapCollection.get("BO").getValue());

    }
  //this hashcode need to generate a number between 0 and the size of the address list. The incoming key value pair
    //will be inserted in the index generated by this list.
    private double hashCode(String key){
        int hashCode = 0;
        for(int i=0; i<key.length(); i++){
            hashCode = (hashCode + key.charAt(i) * i ) % this.size;
        }
        System.out.println("Hash code generated for "+key+" is"+ hashCode);
        return Math.random();
    }

    public void set(String key, Integer value){

        //what is my issue? -> i could find the hashcode. but how to store key and value in that hashcode location?
        //can i use a class?
        //fetch class having the address or create one if don't exist.


        if (Objects.isNull(addresses)) {
            createHashMap(key,value);
        }else{
            addresses.stream()
                    .filter(Objects::nonNull)
                    .forEach(address -> {
                        if(Double.compare(address.getAddress(), hashCode(key)) == 0){
                            address.setValue(value);
                        }
                    });

            if(addresses.stream()
                    .noneMatch(adress ->
                            Double.compare(adress.getAddress(), hashCode(key)) == 0)){

                createHashMap(key,value);

            }
        }



    }

    public Bucket get(String key){
       /* return Optional.ofNullable(addresses
                .stream()
                .filter(address -> address.getAddress().equals(hashCode(key)))
                .findFirst().get())
                .orElse(null);*/

       Optional<Bucket> responseBucket =  addresses.stream()
                .filter(
                        bucket ->
                                Double.compare(bucket.getAddress(), hashCode(key)) == 0)

                .findFirst();

       return Objects.isNull(responseBucket)? null : responseBucket.get();


    }

    private void createHashMap(String key, Integer value){

        Bucket bucket = new Bucket();
        bucket.setKey(key);
        bucket.setValue(value);
        bucket.setAddress(hashCode(key));

        addresses.add(bucket);
    }

}




